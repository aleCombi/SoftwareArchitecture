Intro 

Stakeholder view

- we linked main stakeholders with QAs

Context view

- show the drawing
- main elements: tycoons, customer service, tycoon financial analysts, bank, trip owner,
scanners (turnstiles, controllers), terminals (physical, web app, phone app), banks, physical infrastructure

- main decisions:
    - insert financial analysts to stress a need tycoon might have
    - abstract turnstiles as anything that scans tickets / cards (might be controller), as they need interaction with the same functional elements (user state)
    - abstract terminals as any means of buying tickets, handle subs/accounts (can be app, website, terminal, ticket office)

Functional view

- show the drawing 

- database abstracted
- accounts or single tickets
- payments: one-off or periodic with card or cash, tokenization service to keep data anonymous
- route optimization module uses data updated by tycoons
- booking module to handle reservations
- authentication: scanning cards or tickets at turnstiles => bank card, NFC, single ticket, fillable card, QR on phone app (usability)
- user state module 

- main decisions:
    - remove the word management
    - separated main view with turnstiles view
    - in-house route optimization with precomputing
    - abstracted data storing in this view
    - let bank cards be scanned at turnstiles

Information view

- show the drawing
- divided databases matching functional elements that needs to access and modify them
- interaction with tycoon:
    - we force a data standard
    - only interact via API => we prevent unwanted access to Information (maintenability, integrability, scalability)

- optimization of routes => we periodically get data from tycoons, precompute optimizations 
and cache it (best price, best times)

- keep storage of data so financial analysis can be performed or audit or customer service

- main decisions:
    - forcing a standard data format insertion with a tycoon API 
    - payments are stored in an anonymized way (tockenization) for customer service needs / audit
    - cache optimized routes
    - single tickets and accounts are conceptually similar but we separate due to data insertion frequency difference


Main focus:
    - route optimization and how data flow needs to work for that to be efficient
    - why? 
        main focus of users is to have a seamless integration between the existing systems (usability, performance)

Deployment view