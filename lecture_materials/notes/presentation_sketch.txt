Intro 

Context view

- show the drawing
- main elements: tycoons, customer service, tycoon financial analysts, bank, trip owner,
scanners (turnstiles, controllers), terminals (physical, web app, phone app), banks, physical infrastructure

- main decisions:
    - insert financial analysts to stress a need tycoon might have
    - abstract turnstiles as anything that scans tickets / cards (might be controller), as they need interaction with the same functional elements (user state)
    - abstract terminals as any means of buying tickets, handle subs/accounts (can be app, website, terminal, ticket office)

Functional view

- show the drawing 

- elements: accounts, single-tickets, routes, payments, tycoons api, databases, bank, tycoon, user state
- main decisions:
    - remove the word management
    - separated main view with turnstiles view
    - in-house route optimization with precomputing
    - abstracted data storing in this view
    - let bank cards be scanned at turnstiles

Information view

- show the drawing
- elements: same as functional + payments, tickets, accounts, optimized routes, timetables databases
- main decisions:
    - forcing a standard data format insertion with a tycoon API 
    - payments are stored in an anonymized way (tockenization) for customer service needs / audit

Deployment view